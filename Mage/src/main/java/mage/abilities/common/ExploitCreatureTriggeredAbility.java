
package mage.abilities.common;

import mage.MageObject;
import mage.abilities.TriggeredAbilityImpl;
import mage.abilities.effects.Effect;
import mage.constants.SetTargetPointer;
import mage.constants.Zone;
import mage.game.Game;
import mage.game.events.GameEvent;
import mage.target.targetpointer.FixedTarget;

/**
 *
 * @author LevelX2
 */
public class ExploitCreatureTriggeredAbility extends TriggeredAbilityImpl {

    private SetTargetPointer setTargetPointer;

    public ExploitCreatureTriggeredAbility(Effect effect, boolean optional) {
        this(effect, optional, SetTargetPointer.NONE);
    }

    public ExploitCreatureTriggeredAbility(Effect effect, boolean optional, SetTargetPointer setTargetPointer) {
        super(Zone.BATTLEFIELD, effect, optional);
        this.setTargetPointer = setTargetPointer;
    }

    public ExploitCreatureTriggeredAbility(final ExploitCreatureTriggeredAbility ability) {
        super(ability);
        this.setTargetPointer = ability.setTargetPointer;
    }

    @Override
    public ExploitCreatureTriggeredAbility copy() {
        return new ExploitCreatureTriggeredAbility(this);
    }

    @Override
    public boolean checkEventType(GameEvent event, Game game) {
        return event.getType() == GameEvent.EventType.EXPLOITED_CREATURE;
    }

    @Override
    public boolean isInUseableZone(Game game, MageObject source, GameEvent event) {
        if (event.getTargetId().equals(getSourceId()) && event.getSourceId().equals(getSourceId())) {
            if (!this.hasSourceObjectAbility(game, source, event)) {
                return false;
            }
            this.setControllerId(event.getPlayerId());
            return true; // if Exploits creature sacrifices itself, exploit triggers
        }
        return super.isInUseableZone(game, source, event);
    }

    @Override
    public boolean checkTrigger(GameEvent event, Game game) {
        if (event.getSourceId().equals(getSourceId())) {
            for (Effect effect : getEffects()) {
                if (setTargetPointer == SetTargetPointer.PERMANENT) {
                    effect.setTargetPointer(new FixedTarget(event.getTargetId()));
                }
            }
            return true;
        }
        return false;
    }

    @Override
    public String getRule() {
        return "When {this} exploits a creature, " + super.getRule();
    }
}
